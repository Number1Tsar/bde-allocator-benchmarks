#!/bin/bash

grep . < growth-results | (
  F1=${F#growth-}; X=${F1%-*}; N=${F#growth-??-};
  for S in V- H- VV VH HV HH; do for P in I S; do for B in C R;
  do for M in ND PD PL MD ML XD XL; do read i; echo "$X$N$S$P$B$M, $i";
  done; done; done; done; ) done >T

for i in V- H- VV VH HV HH; do for j in I S; do grep "^....$i$j" T >T-$i$j; done; done

for i in T-???; do
    cat $i | (
      while read tag rest; do
         sz1=${tag#20}; sz=${sz1%%[A-Z]*} ;
         case $tag in
           (*CND*) ix=01;; (*RND*) ix=02;; (*CMD*) ix=03;;
           (*CML*) ix=04;; (*RMD*) ix=05;; (*RML*) ix=06;;
           (*CPD*) ix=07;; (*CPL*) ix=08;; (*RPD*) ix=09;;
           (*RPL*) ix=10;; (*CXD*) ix=11;; (*CXL*) ix=12;;
           (*RXD*) ix=13;; (*RXL*) ix=14;;
         esac;
         echo $sz$ix $tag $rest;
      done;
    ) | sort -sn | (
       while read ix tag time rel rest; do
          # (echo "**ix='$ix' tag='$tag' time='$time' rel='$rel'**"; echo)
          sz=${ix%??}
          sz=${sz#0}  # row heading
          case "$tag" in
              (*CND*) echo -n "$sz, [${time%,}s], ";;
              (*) r=${rel%%%,}; echo -n "${r%.*}, ";;
          esac;
          case "$tag" in
            (*RXL*) echo;
          esac
       done
    ) | (
       # column headings
       echo -n ", AS1, AS2, AS3, AS4, AS5, AS6, AS7"
       echo ", AS8, AS9, AS10, AS11, AS12, AS13, AS14"
       sed -e 's/[(]failed%[)],,/N\/A,/g'
       case "$i" in
            (T-V-I) echo "DS1, vector<int>" ;;
            (T-V-S) echo "DS2, vector<string>" ;;
            (T-H-I) echo "DS3, unordered_set<int>" ;;
            (T-H-S) echo "DS4, unordered_set<string>" ;;
            (T-VVI) echo "DS5, vector<vector<int>>" ;;
            (T-VVS) echo "DS6, vector<vector<string>>" ;;
            (T-VHI) echo "DS7, vector<unordered_set<int>>" ;;
            (T-VHS) echo "DS8, vector<unordered_set<string>>" ;;
            (T-HVI) echo "DS9, unordered_set<vector<int>>" ;;
            (T-HVS) echo "DS10, unordered_set<vector<string>>" ;;
            (T-HHI) echo "DS11, unordered_set<unordered_set<int>>" ;;
            (T-HHS) echo "DS12, unordered_set<unordered_set<string>>" ;;
        esac
        echo
    )  >$i-ASxSZ.csv ;
done

for i in V- H- VV VH HV HH; do for j in I S; do cat T-$i$j-ASxSZ.csv;
  done; done > growth.csv

for i in T-???; do
    cat $i | (
      while read tag rest; do
         sz1=${tag#20}; sz=${sz1%%[A-Z]*} ;
         case $tag in
           (*CND*) ix=01;; (*RND*) ix=02;; (*CMD*) ix=03;;
           (*CML*) ix=04;; (*RMD*) ix=05;; (*RML*) ix=06;;
           (*CPD*) ix=07;; (*CPL*) ix=08;; (*RPD*) ix=09;;
           (*RPL*) ix=10;; (*CXD*) ix=11;; (*CXL*) ix=12;;
           (*RXD*) ix=13;; (*RXL*) ix=14;;
         esac;
         echo $sz$ix $tag $rest;
      done;
    ) | sort -sn | (
       while read ix tag time rel rest; do
          # (echo "**ix='$ix' tag='$tag' time='$time' rel='$rel'**"; echo)
          sz=${ix%??}
          sz=${sz#0}
          case "$tag" in
              (*CND*) echo -n "$sz, ";;
          esac;
          echo -n $time
          case "$tag" in
            (*RXL*) echo;
          esac
       done
    ) | (
       echo -n ", AS1, AS2, AS3, AS4, AS5, AS6, AS7"
       echo ", AS8, AS9, AS10, AS11, AS12, AS13, AS14"
       sed -e 's/[(]failed%[)],,/N\/A,/g'
       case "$i" in
            (T-V-I) echo "DS1, vector<int>" ;;
            (T-V-S) echo "DS2, vector<string>" ;;
            (T-H-I) echo "DS3, unordered_set<int>" ;;
            (T-H-S) echo "DS4, unordered_set<string>" ;;
            (T-VVI) echo "DS5, vector<vector<int>>" ;;
            (T-VVS) echo "DS6, vector<vector<string>>" ;;
            (T-VHI) echo "DS7, vector<unordered_set<int>>" ;;
            (T-VHS) echo "DS8, vector<unordered_set<string>>" ;;
            (T-HVI) echo "DS9, unordered_set<vector<int>>" ;;
            (T-HVS) echo "DS10, unordered_set<vector<string>>" ;;
            (T-HHI) echo "DS11, unordered_set<unordered_set<int>>" ;;
            (T-HHS) echo "DS12, unordered_set<unordered_set<string>>" ;;
        esac
        echo
    )  >$i-ASxSZA.csv ;
done

for i in V- H- VV VH HV HH; do for j in I S; do cat T-$i$j-ASxSZA.csv;
  done; done > growthA.csv

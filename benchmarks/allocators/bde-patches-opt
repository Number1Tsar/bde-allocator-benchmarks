diff --git a/groups/bdl/bdlma/bdlma_pool.cpp b/groups/bdl/bdlma/bdlma_pool.cpp
index b3bb246..7f6ebc3 100644
--- a/groups/bdl/bdlma/bdlma_pool.cpp
+++ b/groups/bdl/bdlma/bdlma_pool.cpp
@@ -26,44 +26,15 @@ struct Link {
 
 // CONSTANTS
 enum {
-    INITIAL_CHUNK_SIZE =  1,  // default number of blocks per chunk
+    k_INITIAL_CHUNK_SIZE =  1,  // default number of blocks per chunk
 
-    GROWTH_FACTOR      =  2,  // multiplicative factor by which to grow pool
-                              // capacity
+    k_GROWTH_FACTOR      =  2,  // multiplicative factor by which to grow pool
+                                // capacity
 
-    MAX_CHUNK_SIZE     = 32   // maximum number of blocks per chunk
+    k_MAX_CHUNK_SIZE     = 32   // maximum number of blocks per chunk
 };
 
 // LOCAL FUNCTIONS
-static
-void *replenishImp(BloombergLP::bdlma::InfrequentDeleteBlockList *blockList,
-                   int                                            blockSize,
-                   int                                            numBlocks,
-                   void                                          *nextList)
-    // Return the address of a linked list of modifiable free memory blocks
-    // having the specified 'numBlocks', with each memory block having the
-    // specified 'blockSize' (in bytes).  Append the specified 'nextList' to
-    // the newly-created linked list.  Allocate memory using the specified
-    // 'blockList'.  The behavior is undefined unless '1 <= blockSize' and
-    // '1 <= numBlocks'.
-{
-    BSLS_ASSERT(blockList);
-    BSLS_ASSERT(1 <= blockSize);
-    BSLS_ASSERT(1 <= numBlocks);
-
-    char *begin = static_cast<char *>(
-                                   blockList->allocate(numBlocks * blockSize));
-    char *end   = begin + (numBlocks - 1) * blockSize;
-
-    for (char *p = begin; p < end; p += blockSize) {
-        reinterpret_cast<Link *>(p)->d_next_p =
-                                       reinterpret_cast<Link *>(p + blockSize);
-    }
-    reinterpret_cast<Link *>(end)->d_next_p = static_cast<Link *>(nextList);
-
-    return begin;
-}
-
 static inline
 int roundUp(int x, int y)
     // Round up the specified 'x' to the nearest whole integer multiple of the
@@ -75,7 +46,7 @@ int roundUp(int x, int y)
     return (x + y - 1) / y * y;
 }
 
-}  // close unnamed namepace
+}  // close unnamed namespace
 
                         // ----------
                         // class Pool
@@ -84,17 +55,16 @@ int roundUp(int x, int y)
 // PRIVATE MANIPULATORS
 void Pool::replenish()
 {
-    d_freeList_p = static_cast<Link *>(replenishImp(&d_blockList,
-                                                    d_internalBlockSize,
-                                                    d_chunkSize,
-                                                    0));
+    d_begin_p = static_cast<char *>(d_blockList.allocate(d_chunkSize
+                                                       * d_internalBlockSize));
+    d_end_p = d_begin_p + d_chunkSize * d_internalBlockSize;
 
-    if (bsls::BlockGrowth::BSLS_GEOMETRIC == d_growthStrategy
-     && d_chunkSize < d_maxBlocksPerChunk) {
+    if (   bsls::BlockGrowth::BSLS_GEOMETRIC == d_growthStrategy
+        && d_chunkSize < d_maxBlocksPerChunk) {
 
         if (BSLS_PERFORMANCEHINT_PREDICT_LIKELY(
-                                     d_chunkSize * 2 <= d_maxBlocksPerChunk)) {
-            d_chunkSize = d_chunkSize * 2;
+                       d_chunkSize * k_GROWTH_FACTOR <= d_maxBlocksPerChunk)) {
+            d_chunkSize = d_chunkSize * k_GROWTH_FACTOR;
         }
         else {
             BSLS_PERFORMANCEHINT_UNLIKELY_HINT;
@@ -106,11 +76,13 @@ void Pool::replenish()
 // CREATORS
 Pool::Pool(int blockSize, bslma::Allocator *basicAllocator)
 : d_blockSize(blockSize)
-, d_chunkSize(INITIAL_CHUNK_SIZE)
-, d_maxBlocksPerChunk(MAX_CHUNK_SIZE)
+, d_chunkSize(k_INITIAL_CHUNK_SIZE)
+, d_maxBlocksPerChunk(k_MAX_CHUNK_SIZE)
 , d_growthStrategy(bsls::BlockGrowth::BSLS_GEOMETRIC)
 , d_freeList_p(0)
 , d_blockList(basicAllocator)
+, d_begin_p(0)
+, d_end_p(0)
 {
     BSLS_ASSERT(1 <= blockSize);
 
@@ -124,12 +96,14 @@ Pool::Pool(int                          blockSize,
            bslma::Allocator            *basicAllocator)
 : d_blockSize(blockSize)
 , d_chunkSize(bsls::BlockGrowth::BSLS_CONSTANT == growthStrategy
-              ? MAX_CHUNK_SIZE
-              : INITIAL_CHUNK_SIZE)
-, d_maxBlocksPerChunk(MAX_CHUNK_SIZE)
+              ? k_MAX_CHUNK_SIZE
+              : k_INITIAL_CHUNK_SIZE)
+, d_maxBlocksPerChunk(k_MAX_CHUNK_SIZE)
 , d_growthStrategy(growthStrategy)
 , d_freeList_p(0)
 , d_blockList(basicAllocator)
+, d_begin_p(0)
+, d_end_p(0)
 {
     BSLS_ASSERT(1 <= blockSize);
 
@@ -145,11 +119,13 @@ Pool::Pool(int                          blockSize,
 : d_blockSize(blockSize)
 , d_chunkSize(bsls::BlockGrowth::BSLS_CONSTANT == growthStrategy
               ? maxBlocksPerChunk
-              : INITIAL_CHUNK_SIZE)
+              : k_INITIAL_CHUNK_SIZE)
 , d_maxBlocksPerChunk(maxBlocksPerChunk)
 , d_growthStrategy(growthStrategy)
 , d_freeList_p(0)
 , d_blockList(basicAllocator)
+, d_begin_p(0)
+, d_end_p(0)
 {
     BSLS_ASSERT(1 <= blockSize);
     BSLS_ASSERT(1 <= maxBlocksPerChunk);
@@ -171,16 +147,35 @@ void Pool::reserveCapacity(int numBlocks)
     BSLS_ASSERT(0 <= numBlocks);
 
     Link *p = d_freeList_p;
-    while (p && numBlocks) {
+    while (p && numBlocks > 0) {
         p = p->d_next_p;
         --numBlocks;
     }
 
-    if (numBlocks) {
-        d_freeList_p = static_cast<Link *>(replenishImp(&d_blockList,
-                                                        d_internalBlockSize,
-                                                        numBlocks,
-                                                        d_freeList_p));
+    if (numBlocks > 0 && d_end_p == d_begin_p) {
+        d_begin_p = static_cast<char *>(d_blockList.allocate(numBlocks
+                                                       * d_internalBlockSize));
+        d_end_p = d_begin_p + numBlocks * d_internalBlockSize;
+        return;                                                       // RETURN
+    }
+
+    numBlocks -= (d_end_p - d_begin_p) / d_internalBlockSize;
+
+    if (numBlocks > 0) {
+
+        // Allocate memory and add its blocks to the free list.
+
+        char *begin = static_cast<char *>(
+                        d_blockList.allocate(numBlocks * d_internalBlockSize));
+        char *end   = begin + (numBlocks - 1) * d_internalBlockSize;
+
+        for (char *p = begin; p < end; p += d_internalBlockSize) {
+            reinterpret_cast<Link *>(p)->d_next_p =
+                             reinterpret_cast<Link *>(p + d_internalBlockSize);
+        }
+
+        reinterpret_cast<Link *>(end)->d_next_p = d_freeList_p;
+        d_freeList_p = reinterpret_cast<Link *>(begin);
     }
 }
 
@@ -188,7 +183,7 @@ void Pool::reserveCapacity(int numBlocks)
 }  // close enterprise namespace
 
 // ----------------------------------------------------------------------------
-// Copyright 2012 Bloomberg Finance L.P.
+// Copyright 2015 Bloomberg Finance L.P.
 //
 // Licensed under the Apache License, Version 2.0 (the "License");
 // you may not use this file except in compliance with the License.
diff --git a/groups/bdl/bdlma/bdlma_pool.h b/groups/bdl/bdlma/bdlma_pool.h
index 6b8bd2e..ef43e69 100644
--- a/groups/bdl/bdlma/bdlma_pool.h
+++ b/groups/bdl/bdlma/bdlma_pool.h
@@ -335,12 +335,15 @@ class Pool {
     InfrequentDeleteBlockList
           d_blockList;          // memory manager for allocated memory
 
+    char *d_begin_p;            // start of a contiguous group of memory blocks
+
+    char *d_end_p;              // end of a contiguous group of memory blocks
+
   private:
     // PRIVATE MANIPULATORS
     void replenish();
         // Dynamically allocate a new chunk using this pool's underlying growth
-        // strategy, and use the chunk to replenish the free memory list of
-        // this pool.
+        // strategy.
 
   private:
     // NOT IMPLEMENTED
@@ -492,7 +495,7 @@ void operator delete(void *address, BloombergLP::bdlma::Pool& pool);
     // to be called in the case of an exception.
 
 // ============================================================================
-//                      INLINE FUNCTION DEFINITIONS
+//                          INLINE DEFINITIONS
 // ============================================================================
 
 namespace BloombergLP {
@@ -506,12 +509,18 @@ namespace bdlma {
 inline
 void *Pool::allocate()
 {
-    if (!d_freeList_p) {
+    if (d_begin_p == d_end_p) {
+        if (d_freeList_p) {
+            Link *p      = d_freeList_p;
+            d_freeList_p = p->d_next_p;
+            return p;                                                 // RETURN
+        }
+
         replenish();
     }
 
-    Link *p      = d_freeList_p;
-    d_freeList_p = p->d_next_p;
+    char *p = d_begin_p;
+    d_begin_p += d_internalBlockSize;
     return p;
 }
 
@@ -543,6 +552,8 @@ void Pool::release()
 {
     d_blockList.release();
     d_freeList_p = 0;
+    d_begin_p = 0;
+    d_end_p = 0;
 }
 
 // ACCESSORS
@@ -581,7 +592,7 @@ void operator delete(void *address, BloombergLP::bdlma::Pool& pool)
 #endif
 
 // ----------------------------------------------------------------------------
-// Copyright 2012 Bloomberg Finance L.P.
+// Copyright 2015 Bloomberg Finance L.P.
 //
 // Licensed under the Apache License, Version 2.0 (the "License");
 // you may not use this file except in compliance with the License.
diff --git a/groups/bdl/bdlma/bdlma_pool.t.cpp b/groups/bdl/bdlma/bdlma_pool.t.cpp
index 83fdde2..329136c 100644
--- a/groups/bdl/bdlma/bdlma_pool.t.cpp
+++ b/groups/bdl/bdlma/bdlma_pool.t.cpp
@@ -593,7 +593,7 @@ int main(int argc, char *argv[])
                 mX.allocate();
             }
 
-            int numAllocations = A.numAllocations();
+            bsls::Types::Int64 numAllocations = A.numAllocations();
             mX.reserveCapacity(CHUNK_SIZE / 2);
             ASSERT(A.numAllocations() == numAllocations);
 
@@ -1159,24 +1159,31 @@ int main(int argc, char *argv[])
         Strategy GEO = bsls::BlockGrowth::BSLS_GEOMETRIC;
         Strategy CON = bsls::BlockGrowth::BSLS_CONSTANT;
 
+        const int NUM_REQUESTS = 100;
+
+        // Note that after the NUM_REQUESTS allocations are performed, there
+        // will be unallocated blocks that will be used before the free list;
+        // 'd_availBlocks' provides the expected number of these unallocated
+        // blocks.
+
         struct {
             int      d_line;
             int      d_blockSize;
             int      d_numBlocks;
             Strategy d_strategy;
+            int      d_availBlocks;
         } DATA[] = {
-            //line    block
-            //no.     size      max chunk size    growth strategy
-            //----    ------    ----------------  ---------------
-            { L_,       1,                    5,            CON },
-            { L_,       5,                   10,            CON },
-            { L_,      12,                    1,            GEO },
-            { L_,      24,                    5,            GEO },
-            { L_,      32,       MAX_CHUNK_SIZE,            GEO }
+            //    block                         avail
+            //LN  size   max chunk size  strat  blocks
+            //--  -----  --------------  -----  ------
+            { L_,     1,              5,   CON,      0 },
+            { L_,     5,             10,   CON,      0 },
+            { L_,    12,              1,   GEO,      0 },
+            { L_,    24,              5,   GEO,      2 },
+            { L_,    32, MAX_CHUNK_SIZE,   GEO,     27 }
         };
         const int NUM_DATA = sizeof DATA / sizeof *DATA;
 
-        const int NUM_REQUESTS = 100;
         void *p[NUM_REQUESTS];
         bslma::TestAllocator ta(veryVeryVerbose);
         const bslma::TestAllocator& TA = ta;
@@ -1186,6 +1193,7 @@ int main(int argc, char *argv[])
             const int      BLOCK_SIZE = DATA[ti].d_blockSize;
             const int      CHUNK_SIZE = DATA[ti].d_numBlocks;
             const Strategy STRATEGY   = DATA[ti].d_strategy;
+            const int      AVAIL      = DATA[ti].d_availBlocks;
 
             Obj mX(BLOCK_SIZE, STRATEGY, CHUNK_SIZE, &ta);
 
@@ -1193,7 +1201,7 @@ int main(int argc, char *argv[])
                 p[ai] = mX.allocate();
             }
 
-            int numAllocations = TA.numAllocations();
+            bsls::Types::Int64 numAllocations = TA.numAllocations();
 
             for (int dd = NUM_REQUESTS - 1; dd >= 0; --dd) {
                 mX.deallocate(p[dd]);
@@ -1202,8 +1210,11 @@ int main(int argc, char *argv[])
             if (veryVerbose) { T_ P_(CHUNK_SIZE); P(numAllocations); }
 
             // Ensure memory was deallocated in the expected sequence.
-            for (int aj = 0; aj < NUM_REQUESTS; ++aj) {
-                LOOP3_ASSERT(LINE, ti, aj, p[aj] == mX.allocate());
+            for (int aj = 0; aj < AVAIL; ++aj) {
+                mX.allocate();
+            }
+            for (int aj = AVAIL; aj < NUM_REQUESTS; ++aj) {
+                LOOP3_ASSERT(LINE, ti, aj, p[aj - AVAIL] == mX.allocate());
             }
 
             // Ensure no additional memory requests to the allocator occurred.
@@ -1286,7 +1297,7 @@ int main(int argc, char *argv[])
                     mY.allocate();
                 }
 
-                int numAllocations = TAX.numAllocations();
+                bsls::Types::Int64 numAllocations = TAX.numAllocations();
                 int numBytes = TAX.lastAllocatedNumBytes();
                 if (veryVerbose) { T_ P_(numAllocations); T_ P(numBytes); }
                 LOOP_ASSERT(chunkSize,
@@ -1323,7 +1334,7 @@ int main(int argc, char *argv[])
                     mY.allocate();
                 }
 
-                int numAllocations = TAX.numAllocations();
+                bsls::Types::Int64 numAllocations = TAX.numAllocations();
                 int numBytes = TAX.lastAllocatedNumBytes();
                 if (veryVerbose) { T_ P_(numAllocations); T_ P(numBytes); }
                 LOOP_ASSERT(chunkSize, TAY.numAllocations() == numAllocations);
@@ -1482,7 +1493,7 @@ int main(int argc, char *argv[])
             BSLMA_TESTALLOCATOR_EXCEPTION_TEST_BEGIN(testAllocator) {
                 Obj mX(BLOCK_SIZE, STRATEGY, MAXBLOCKS, &testAllocator);
 
-                int numAllocations = 0;
+                bsls::Types::Int64 numAllocations = 0;
 
                 // If geometric, grow till constant size first.
                 if (GEO == STRATEGY) {
@@ -1739,7 +1750,7 @@ int main(int argc, char *argv[])
 }
 
 // ----------------------------------------------------------------------------
-// Copyright 2012 Bloomberg Finance L.P.
+// Copyright 2015 Bloomberg Finance L.P.
 //
 // Licensed under the Apache License, Version 2.0 (the "License");
 // you may not use this file except in compliance with the License.
diff --git a/groups/bsl/bslma/bslma_newdeleteallocator.cpp b/groups/bsl/bslma/bslma_newdeleteallocator.cpp
index 73b368a..972ecdb 100644
--- a/groups/bsl/bslma/bslma_newdeleteallocator.cpp
+++ b/groups/bsl/bslma/bslma_newdeleteallocator.cpp
@@ -94,12 +94,6 @@ NewDeleteAllocator::~NewDeleteAllocator()
 {
 }
 
-// MANIPULATORS
-void *NewDeleteAllocator::allocate(size_type size)
-{
-    return 0 == size ? 0 : ::operator new(size);
-}
-
 }  // close package namespace
 
 }  // close enterprise namespace
diff --git a/groups/bsl/bslma/bslma_newdeleteallocator.h b/groups/bsl/bslma/bslma_newdeleteallocator.h
index 61e50a3..67ecb96 100644
--- a/groups/bsl/bslma/bslma_newdeleteallocator.h
+++ b/groups/bsl/bslma/bslma_newdeleteallocator.h
@@ -350,6 +350,12 @@ NewDeleteAllocator::NewDeleteAllocator()
 
 // MANIPULATORS
 inline
+void *NewDeleteAllocator::allocate(size_type size)
+{
+    return 0 == size ? 0 : ::operator new(size);
+}
+
+inline
 void NewDeleteAllocator::deallocate(void *address)
 {
     // While the C++ standard guarantees that calling delete(0) is safe
